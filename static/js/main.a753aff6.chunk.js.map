{"version":3,"sources":["serviceWorker.ts","Assets/SoulAssets/Gods.ts","Components/React/Game/Approval.tsx","Assets/SoulAssets/SoulDeaths.ts","Assets/SoulAssets/SoulOccupations.ts","Assets/SoulAssets/Taboos.ts","Components/React/Game/SoulHistory.tsx","Store/Gods/actions.ts","Store/Gods/reducer.ts","configs.ts","Lib/utils/Enums.ts","Lib/utils/Random.ts","Lib/Soul.ts","Store/World/actions.ts","Store/World/reducer.ts","Store/index.ts","Lib/Gods/Archivist.ts","Lib/Gods/GodController.ts","Lib/Gods/Father.ts","Lib/Gods/Warrior.ts","Components/React/Game/SoulSorting.tsx","Components/React/Game/World.tsx","Components/React/Game/Game.tsx","Components/React/App.tsx","index.tsx"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Gods","GodNames","SoulDeaths","Approval","useSelector","gods","archiverApproval","archiverDelta","fatherApproval","fatherDelta","warriorApproval","warriorDelta","style","textAlign","border","width","name","values","Row","sign","Math","abs","SoulDeathNames","SoulOcupations","SoulOcupationNames","Taboos","TabooNames","SoulHistory","soul","world","currentSoul","occupation","ageDeath","causeOfDeath","worships","length","map","g","i","taboosBroken","t","setFather","createAction","setWarrior","setArchivist","godsReducer","createReducer","builder","addCase","action","payload","CONFIGS","EnumToArray","e","res","key","push","slice","RandomFromArray","array","floor","random","RandomFromEnum","RandomNumber","max","min","RandomNumberRange","generateSoul","age","Disease","MauledAnimals","Murdered","Starvation","numbOfTaboos","num","aux","item","filter","a","RandomArrayFromArray","getTaboos","getGods","newSoul","newDay","endDay","initialState","soulsLeft","day","chaos","timerRunning","worldReducer","timerStart","undefined","timerEnd","moment","add","combinedReducer","combineReducers","store","createStore","Archivist","id","approvalDelta","Priest","Scholar","Farmer","FreakAccident","onAccept","this","onReject","round","onDestroy","onSort","god","dispatch","GodController","Father","King","Thief","includes","some","Blasphemy","Adultery","Warrior","General","Soldier","KilledBattle","Old","Desertion","forEach","SoulSorting","onClick","disabled","World","useState","intv","setIntv","timer","setTimer","useDispatch","useEffect","setInterval","getTimer","clearInterval","diff","format","rowSpan","Game","App","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.a753aff6.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const GodNames = [\"Briliant Father\", \"Unconquerable Warrior\", \"The Archivist\"];\r\nexport enum Gods {\r\n    Father,\r\n    Warrior,\r\n    Archivist,\r\n}\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { GodNames } from \"../../../Assets/SoulAssets/Gods\";\r\nimport { AppState } from \"../../../Store\";\r\n\r\nexport const Approval: React.FC = () => {\r\n    const { archiverApproval, archiverDelta, fatherApproval, fatherDelta, warriorApproval, warriorDelta } = useSelector((state: AppState) => state.gods);\r\n\r\n    return (\r\n        <div style={{ textAlign: \"left\", border: \"solid 1px\", width: \"max-content\" }}>\r\n            <table>\r\n                <tbody>\r\n                    <Row name={GodNames[0]} values={[fatherApproval, fatherDelta]} />\r\n                    <Row name={GodNames[1]} values={[warriorApproval, warriorDelta]} />\r\n                    <Row name={GodNames[2]} values={[archiverApproval, archiverDelta]} />\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst Row: React.FC<{ name: string; values: number[] }> = ({ name, values }) => {\r\n    let sign = \"\";\r\n    switch (Math.sign(values[1])) {\r\n        case -1:\r\n            sign = \"-\";\r\n            break;\r\n        case 1:\r\n            sign = \"+\";\r\n    }\r\n    return (\r\n        <tr>\r\n            <th>{name}</th>\r\n            <td>{`${values[0]} (${sign}${Math.abs(values[1])})`}</td>\r\n        </tr>\r\n    );\r\n};\r\n","export const SoulDeathNames = [\"Disease\", \"Killed in battle\", \"Murdered\", \"Starvation\", \"Freak accident\", \"Mauled by animals\", \"Old age\"];\r\nexport enum SoulDeaths {\r\n    Disease,\r\n    KilledBattle,\r\n    Murdered,\r\n    Starvation,\r\n    FreakAccident,\r\n    MauledAnimals,\r\n    Old,\r\n}\r\n","export const SoulOcupationNames = [\"Priest\", \"King\", \"Scholar\", \"General\", \"Farmer\", \"Soldier\", \"Thief\"];\r\nexport enum SoulOcupations {\r\n    Priest,\r\n    King,\r\n    Scholar,\r\n    General,\r\n    Farmer,\r\n    Soldier,\r\n    Thief,\r\n}\r\n","export const TabooNames = [\"Blasphemy\", \"Murder\", \"Desertion\", \"Adultery\"];\r\nexport enum Taboos {\r\n    Blasphemy,\r\n    Murder,\r\n    Desertion,\r\n    Adultery,\r\n}\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { GodNames } from \"../../../Assets/SoulAssets/Gods\";\r\nimport { SoulDeathNames } from \"../../../Assets/SoulAssets/SoulDeaths\";\r\nimport { SoulOcupationNames } from \"../../../Assets/SoulAssets/SoulOccupations\";\r\nimport { TabooNames } from \"../../../Assets/SoulAssets/Taboos\";\r\nimport { AppState } from \"../../../Store\";\r\n\r\nexport const SoulHistory: React.FC = () => {\r\n    const soul = useSelector((state: AppState) => state.world.currentSoul);\r\n\r\n    return (\r\n        <div style={{ textAlign: \"left\", border: \"solid 1px\", width: \"max-content\" }}>\r\n            <table>\r\n                <tbody>\r\n                    <tr>\r\n                        <th>Name</th>\r\n                        <td>{soul.name}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <th>Ocupation</th>\r\n                        <td>{soul.occupation !== null ? SoulOcupationNames[soul.occupation] : \"N/A\"}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <th>Age of Death</th>\r\n                        <td>{soul.ageDeath}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <th>Cause of death</th>\r\n                        <td>{SoulDeathNames[soul.causeOfDeath]}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <th>Worships</th>\r\n                        <td>\r\n                            {soul.worships.length > 0 ? soul.worships.map((g, i) => `${GodNames[g]}${soul.worships.length - 1 !== i ? \", \" : \"\"}`) : \"Atheist\"}\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <th>Taboos Broken</th>\r\n                        <td>\r\n                            {soul.taboosBroken.length > 0\r\n                                ? soul.taboosBroken.map((t, i) => `${TabooNames[t]}${soul.taboosBroken.length - 1 !== i ? \", \" : \"\"}`)\r\n                                : \"None\"}\r\n                        </td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n};\r\n","import { createAction } from \"@reduxjs/toolkit\";\r\n\r\nexport const setFather = createAction<number>(\"SetFather\");\r\nexport const setWarrior = createAction<number>(\"SetWarrior\");\r\nexport const setArchivist = createAction<number>(\"SetArchivist\");\r\n","import { createReducer } from \"@reduxjs/toolkit\";\r\nimport { setArchivist, setFather, setWarrior } from \"./actions\";\r\nimport { GodsState } from \"./types\";\r\n\r\nconst initialState: GodsState = {\r\n    archiverApproval: 0,\r\n    archiverDelta: 0,\r\n    fatherApproval: 0,\r\n    fatherDelta: 0,\r\n    warriorApproval: 0,\r\n    warriorDelta: 0,\r\n};\r\n\r\nexport const godsReducer = createReducer(initialState, (builder) => {\r\n    builder\r\n        .addCase(setFather, (state, action) => {\r\n            state.fatherApproval += action.payload;\r\n            state.fatherDelta = action.payload;\r\n        })\r\n        .addCase(setWarrior, (state, action) => {\r\n            state.warriorApproval += action.payload;\r\n            state.warriorDelta = action.payload;\r\n        })\r\n        .addCase(setArchivist, (state, action) => {\r\n            state.archiverApproval += action.payload;\r\n            state.archiverDelta = action.payload;\r\n        });\r\n});\r\n","export const CONFIGS = {\r\n    daylength: 5,\r\n    soulsPerDay: 10,\r\n    startingSouls: 10,\r\n};\r\n","export function EnumToArray(e: any) {\r\n    let res: number[] = [];\r\n\r\n    for (var key in e) {\r\n        res.push(e[key]);\r\n    }\r\n    res = res.slice(res.length / 2);\r\n    return res;\r\n}\r\n","import { EnumToArray } from \"./Enums\";\r\n\r\nexport function RandomFromArray<T>(array: T[]): T {\r\n    return array[Math.floor(Math.random() * array.length)];\r\n}\r\n\r\nexport function RandomFromEnum(e: any) {\r\n    return RandomFromArray(EnumToArray(e));\r\n}\r\n\r\nexport function RandomNumberRange(min: number, max: number) {\r\n    return Math.floor(Math.random() * (max + 1 - min) + min);\r\n}\r\n\r\nexport function RandomNumber(max: number) {\r\n    return RandomNumberRange(0, max);\r\n}\r\n\r\nexport function RandomArrayFromArray<T>(array: T[], num: number): T[] {\r\n    let aux = [...array];\r\n    let res: T[] = [];\r\n\r\n    for (let i = 0; i < num; i++) {\r\n        const item = RandomFromArray(aux);\r\n        res.push(item);\r\n        aux = aux.filter((a) => a !== item);\r\n    }\r\n\r\n    return res;\r\n}\r\n","import { Gods } from \"../Assets/SoulAssets/Gods\";\r\nimport { SoulDeaths } from \"../Assets/SoulAssets/SoulDeaths\";\r\nimport { SoulOcupations } from \"../Assets/SoulAssets/SoulOccupations\";\r\nimport { Taboos } from \"../Assets/SoulAssets/Taboos\";\r\nimport { EnumToArray } from \"./utils/Enums\";\r\nimport { RandomArrayFromArray, RandomFromArray, RandomFromEnum, RandomNumber } from \"./utils/Random\";\r\n\r\nexport interface Soul {\r\n    name: string;\r\n    occupation: number | null;\r\n    ageDeath: number;\r\n    causeOfDeath: number;\r\n    worships: number[];\r\n    taboosBroken: number[];\r\n}\r\n\r\nexport function generateSoul() {\r\n    const age = RandomNumber(80);\r\n    let causeOfDeath: SoulDeaths;\r\n    let occupation: SoulOcupations | null = null;\r\n    let taboosBroken: number[] = [];\r\n    let worships: number[] = [];\r\n\r\n    if (age < 14) {\r\n        //If character is a child\r\n        causeOfDeath = RandomFromArray([SoulDeaths.Disease, SoulDeaths.MauledAnimals, SoulDeaths.Murdered, SoulDeaths.Starvation]);\r\n    } else {\r\n        //If adult\r\n        causeOfDeath = RandomFromEnum(SoulDeaths);\r\n        occupation = RandomFromEnum(SoulOcupations);\r\n        taboosBroken = getTaboos();\r\n        worships = getGods();\r\n    }\r\n\r\n    const res: Soul = {\r\n        name: \"TO BE IMPLEMENTED\",\r\n        ageDeath: age,\r\n        causeOfDeath: causeOfDeath,\r\n        occupation: occupation,\r\n        taboosBroken: taboosBroken,\r\n        worships: worships,\r\n    };\r\n    return res;\r\n}\r\n\r\nfunction getTaboos() {\r\n    const random = RandomNumber(100);\r\n    let numbOfTaboos = 0;\r\n    //50% chance of breaking 1 taboo\r\n    if (random < 50) numbOfTaboos = 1;\r\n    //25% chance of breaking 2 taboos\r\n    else if (random < 75) numbOfTaboos = 2;\r\n    //5% chance of breaking 3 taboos\r\n    else if (random < 80) numbOfTaboos = 3;\r\n    //20% chance of never having broken a taboo\r\n\r\n    return RandomArrayFromArray(EnumToArray(Taboos), numbOfTaboos);\r\n}\r\n\r\nfunction getGods(): number[] {\r\n    const gods = EnumToArray(Gods);\r\n    const res: number[] = [];\r\n    for (let g = 0; g < gods.length; g++) {\r\n        if (RandomNumber(2) === 2) res.push(gods[g]);\r\n    }\r\n    return res;\r\n}\r\n","import { createAction } from \"@reduxjs/toolkit\";\r\n\r\nexport const newSoul = createAction(\"newSoul\");\r\nexport const newDay = createAction(\"newDay\");\r\nexport const endDay = createAction(\"endDay\");\r\n","import { createReducer } from \"@reduxjs/toolkit\";\r\nimport moment from \"moment\";\r\nimport { CONFIGS } from \"../../configs\";\r\nimport { generateSoul } from \"../../Lib/Soul\";\r\nimport { endDay, newDay, newSoul } from \"./actions\";\r\nimport { WorldState } from \"./type\";\r\n\r\nconst initialState: WorldState = {\r\n    currentSoul: generateSoul(),\r\n    soulsLeft: CONFIGS.startingSouls,\r\n    day: 0,\r\n    chaos: 0,\r\n    timerRunning: false,\r\n};\r\n\r\nexport const worldReducer = createReducer(initialState, (builder) => {\r\n    builder\r\n        .addCase(newSoul, (state) => {\r\n            state.soulsLeft--;\r\n            if (state.soulsLeft <= 0) {\r\n                state.timerRunning = false;\r\n                state.timerStart = undefined;\r\n                state.timerEnd = undefined;\r\n            }\r\n            state.currentSoul = generateSoul();\r\n        })\r\n        .addCase(newDay, (state) => {\r\n            state.timerRunning = true;\r\n            state.timerStart = moment();\r\n            state.timerEnd = moment().add(CONFIGS.daylength, \"minute\").add(1, \"s\");\r\n            state.day++;\r\n            state.soulsLeft += CONFIGS.soulsPerDay;\r\n        })\r\n        .addCase(endDay, (state) => {\r\n            state.timerRunning = false;\r\n            state.timerStart = undefined;\r\n            state.timerEnd = undefined;\r\n            state.chaos += state.soulsLeft;\r\n        });\r\n});\r\n","import { combineReducers, createStore } from \"redux\";\r\nimport { godsReducer } from \"./Gods/reducer\";\r\nimport { GodsState } from \"./Gods/types\";\r\nimport { worldReducer } from \"./World/reducer\";\r\nimport { WorldState } from \"./World/type\";\r\n\r\nexport interface AppState {\r\n    gods: GodsState;\r\n    world: WorldState;\r\n}\r\n\r\nexport const combinedReducer = combineReducers<AppState>({ gods: godsReducer, world: worldReducer });\r\nexport const store = createStore(combinedReducer);\r\n","import { Gods } from \"../../Assets/SoulAssets/Gods\";\r\nimport { SoulDeaths } from \"../../Assets/SoulAssets/SoulDeaths\";\r\nimport { SoulOcupations } from \"../../Assets/SoulAssets/SoulOccupations\";\r\nimport { store } from \"../../Store\";\r\nimport { setArchivist } from \"../../Store/Gods/actions\";\r\nimport { Soul } from \"../Soul\";\r\nimport { God } from \"../types/God\";\r\n\r\nexport const Archivist: God = {\r\n    id: Gods.Archivist,\r\n    approvalDelta: function (soul: Soul) {\r\n        let approvalDelta = 0;\r\n\r\n        //Likes older people\r\n        if (soul.ageDeath <= 40) approvalDelta++;\r\n\r\n        //Likes Scholars and Priests\r\n        //Dislikes Farmers\r\n        switch (soul.occupation) {\r\n            case SoulOcupations.Priest:\r\n            case SoulOcupations.Scholar:\r\n                approvalDelta++;\r\n                break;\r\n            case SoulOcupations.Farmer:\r\n                approvalDelta--;\r\n        }\r\n\r\n        //Likes people who died in wierd ways\r\n        switch (soul.causeOfDeath) {\r\n            case SoulDeaths.FreakAccident:\r\n            case SoulDeaths.MauledAnimals:\r\n                approvalDelta++;\r\n        }\r\n\r\n        return approvalDelta;\r\n    },\r\n    onAccept: function (soul: Soul) {\r\n        //No modifiers on accept\r\n        const approvalDelta = this.approvalDelta(soul);\r\n        return approvalDelta;\r\n    },\r\n    onReject: function (soul: Soul) {\r\n        //Prefers that souls be given to others than if they're destroyed\r\n        const approvalDelta = Math.max(Math.round(this.approvalDelta(soul) / 2), 0);\r\n        return approvalDelta;\r\n    },\r\n    onDestroy: function (soul: Soul) {\r\n        //Dislikes a lot when souls are destroyed\r\n        const approvalDelta = Math.min(-this.approvalDelta(soul), -1);\r\n        return approvalDelta;\r\n    },\r\n    onSort: function (soul: Soul, god?: Gods) {\r\n        let approvalDelta: number;\r\n        if (god === undefined) {\r\n            approvalDelta = this.onDestroy(soul);\r\n        } else if (god === this.id) {\r\n            approvalDelta = this.onAccept(soul);\r\n        } else {\r\n            approvalDelta = this.onReject(soul);\r\n        }\r\n        store.dispatch(setArchivist(approvalDelta));\r\n    },\r\n};\r\n","import { Gods } from \"../../Assets/SoulAssets/Gods\";\r\nimport { store } from \"../../Store\";\r\nimport { newSoul } from \"../../Store/World/actions\";\r\nimport { Soul } from \"../Soul\";\r\nimport { Archivist } from \"./Archivist\";\r\nimport { FatherGod } from \"./Father\";\r\nimport { WarriorGod } from \"./Warrior\";\r\n\r\nexport const GodController = {\r\n    gods: [FatherGod, WarriorGod, Archivist],\r\n    onSort: function (soul: Soul, god?: Gods) {\r\n        this.gods.forEach((g) => g.onSort(soul, god));\r\n        store.dispatch(newSoul());\r\n    },\r\n};\r\n","import { Gods } from \"../../Assets/SoulAssets/Gods\";\r\nimport { SoulOcupations } from \"../../Assets/SoulAssets/SoulOccupations\";\r\nimport { Taboos } from \"../../Assets/SoulAssets/Taboos\";\r\nimport { store } from \"../../Store\";\r\nimport { setFather } from \"../../Store/Gods/actions\";\r\nimport { Soul } from \"../Soul\";\r\nimport { God } from \"../types/God\";\r\n\r\nexport const FatherGod: God = {\r\n    id: Gods.Father,\r\n    approvalDelta: function (soul: Soul) {\r\n        let approvalDelta = 0;\r\n        //Likes priests and kings, dislikes thieves\r\n        switch (soul.occupation) {\r\n            case SoulOcupations.King:\r\n            case SoulOcupations.Priest:\r\n                approvalDelta += 1;\r\n                break;\r\n            case SoulOcupations.Thief:\r\n                approvalDelta--;\r\n                break;\r\n        }\r\n\r\n        //Dislikes if not worshipped, likes if worshipped\r\n        approvalDelta += soul.worships.includes(Gods.Father) ? 2 : -1;\r\n\r\n        approvalDelta += soul.worships.some((g) => g !== Gods.Father) ? -1 : 0;\r\n\r\n        //Dislikes Blasphemy and Adultery\r\n        if (soul.taboosBroken.includes(Taboos.Blasphemy) || soul.taboosBroken.includes(Taboos.Adultery)) approvalDelta--;\r\n\r\n        return approvalDelta;\r\n    },\r\n    onAccept: function (soul: Soul) {\r\n        //Likes when given a soul\r\n        const approvalDelta = this.approvalDelta(soul) + 1;\r\n        return approvalDelta;\r\n    },\r\n    onReject: function (soul: Soul) {\r\n        //Dislikes when the soul is rejected\r\n        const approvalDelta = -1;\r\n        return approvalDelta;\r\n    },\r\n    onDestroy: function (soul: Soul) {\r\n        //Inverts the approval change from what they would've gained if they\r\n        //were given the soul\r\n        const approvalDelta = -this.approvalDelta(soul);\r\n        return approvalDelta;\r\n    },\r\n    onSort: function (soul: Soul, god?: Gods) {\r\n        let approvalDelta: number;\r\n        if (god === undefined) {\r\n            approvalDelta = this.onDestroy(soul);\r\n        } else if (god === this.id) {\r\n            approvalDelta = this.onAccept(soul);\r\n        } else {\r\n            approvalDelta = this.onReject(soul);\r\n        }\r\n        store.dispatch(setFather(approvalDelta));\r\n    },\r\n};\r\n","import { Gods } from \"../../Assets/SoulAssets/Gods\";\r\nimport { SoulDeaths } from \"../../Assets/SoulAssets/SoulDeaths\";\r\nimport { SoulOcupations } from \"../../Assets/SoulAssets/SoulOccupations\";\r\nimport { Taboos } from \"../../Assets/SoulAssets/Taboos\";\r\nimport { store } from \"../../Store\";\r\nimport { setWarrior } from \"../../Store/Gods/actions\";\r\nimport { Soul } from \"../Soul\";\r\nimport { God } from \"../types/God\";\r\n\r\nexport const WarriorGod: God = {\r\n    id: Gods.Warrior,\r\n    approvalDelta: function (soul: Soul) {\r\n        let approvalDelta = 0;\r\n\r\n        //Really likes Kings and Generals\r\n        //Likes Soldiers\r\n        switch (soul.occupation) {\r\n            case SoulOcupations.King:\r\n            case SoulOcupations.General:\r\n                approvalDelta += 2;\r\n                break;\r\n            case SoulOcupations.Soldier:\r\n                approvalDelta++;\r\n        }\r\n\r\n        //Likes people who died in battle\r\n        //Dislikes people who died of old age or disease\r\n        switch (soul.causeOfDeath) {\r\n            case SoulDeaths.KilledBattle:\r\n                approvalDelta++;\r\n                break;\r\n            case SoulDeaths.Old:\r\n            case SoulDeaths.Disease:\r\n                approvalDelta--;\r\n        }\r\n\r\n        //Likes young adult people (14 - 39)\r\n        //Dislikes old people (40+)\r\n        if (soul.ageDeath >= 14) {\r\n            if (soul.ageDeath < 40) approvalDelta++;\r\n            else approvalDelta--;\r\n        }\r\n\r\n        //Dislikes deserters\r\n        if (soul.taboosBroken.includes(Taboos.Desertion)) approvalDelta--;\r\n\r\n        return approvalDelta;\r\n    },\r\n    onAccept: function (soul: Soul) {\r\n        const approvalDelta = this.approvalDelta(soul) + 1;\r\n        return approvalDelta;\r\n    },\r\n    onReject: function (soul: Soul) {\r\n        const approvalDelta = -this.approvalDelta(soul);\r\n        return approvalDelta;\r\n    },\r\n    onDestroy: function (soul: Soul) {\r\n        const approvalDelta = -this.approvalDelta(soul);\r\n        return approvalDelta;\r\n    },\r\n    onSort: function (soul: Soul, god?: Gods) {\r\n        let approvalDelta: number;\r\n        if (!god) {\r\n            approvalDelta = this.onDestroy(soul);\r\n        } else if (god === this.id) {\r\n            approvalDelta = this.onAccept(soul);\r\n        } else {\r\n            approvalDelta = this.onReject(soul);\r\n        }\r\n        store.dispatch(setWarrior(approvalDelta));\r\n    },\r\n};\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { GodNames } from \"../../../Assets/SoulAssets/Gods\";\r\nimport { GodController } from \"../../../Lib/Gods/GodController\";\r\nimport { AppState } from \"../../../Store\";\r\n\r\nexport const SoulSorting: React.FC = () => {\r\n    const { currentSoul, timerRunning } = useSelector((state: AppState) => state.world);\r\n\r\n    return (\r\n        <div>\r\n            {GodController.gods.map((g) => (\r\n                <button key={g.id} onClick={() => GodController.onSort(currentSoul, g.id)} disabled={!timerRunning}>\r\n                    {GodNames[g.id]}\r\n                </button>\r\n            ))}\r\n            <button onClick={() => GodController.onSort(currentSoul)} disabled={!timerRunning}>\r\n                Destroy\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n","import moment, { Moment } from \"moment\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { AppState } from \"../../../Store\";\r\nimport { endDay, newDay } from \"../../../Store/World/actions\";\r\n\r\nexport const World: React.FC = () => {\r\n    const [intv, setIntv] = useState<NodeJS.Timeout | null>(null);\r\n    const [timer, setTimer] = useState<Moment | null>(null);\r\n    const { chaos, soulsLeft, day, timerRunning, timerEnd, timerStart } = useSelector((state: AppState) => state.world);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        if (timerRunning) setIntv(setInterval(getTimer, 1000));\r\n        else if (intv) {\r\n            clearInterval(intv);\r\n            setIntv(null);\r\n        }\r\n    }, [timerRunning]);\r\n\r\n    const getTimer = () => {\r\n        if (timerEnd && timerStart) {\r\n            const diff = timerEnd.diff(moment());\r\n            if (diff > 0) setTimer(moment(diff));\r\n            else dispatch(endDay());\r\n        }\r\n    };\r\n\r\n    return (\r\n        <table style={{ border: \"solid 1px\" }}>\r\n            <tbody>\r\n                <tr>\r\n                    <th>Chaos</th>\r\n                    <td>{chaos}</td>\r\n                </tr>\r\n                <tr>\r\n                    <th>Souls Left</th>\r\n                    <td>{soulsLeft}</td>\r\n                </tr>\r\n                <tr>\r\n                    <th>Day</th>\r\n                    <td>{day}</td>\r\n                </tr>\r\n                <tr>\r\n                    <th>Timer</th>\r\n                    <td>{timerRunning && timer ? timer.format(\"mm:ss\") : \"00:00\"}</td>\r\n                </tr>\r\n                <tr>\r\n                    <td rowSpan={2}>\r\n                        <button onClick={() => dispatch(newDay())} disabled={timerRunning}>\r\n                            New Day\r\n                        </button>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { Approval } from \"./Approval\";\r\nimport { SoulHistory } from \"./SoulHistory\";\r\nimport { SoulSorting } from \"./SoulSorting\";\r\nimport { World } from \"./World\";\r\n\r\nexport const Game: React.FC = () => {\r\n    return (\r\n        <div>\r\n            <SoulHistory />\r\n            <SoulSorting />\r\n            <Approval />\r\n            <World />\r\n        </div>\r\n    );\r\n};\r\n","import \"../Sass/App.sass\";\nimport React from \"react\";\n\nimport { Game } from \"./Game/Game\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"../../Store\";\n\nexport default function App() {\n    return (\n        <Provider store={store}>\n            <Game />\n        </Provider>\n    );\n}\n","// order to import: CSS, React, node, code, components, assets\n\nimport \"./index.sass\";\n// React\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n// code\nimport * as serviceWorker from \"./serviceWorker\";\n// components\nimport App from \"./Components/React/App\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}